version: '3.3'
services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'video_analyzer_mq'
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbit-mq-data:/var/lib

  redis:
    image: "redis"
    command: redis-server
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/var/lib/redis
    environment:
      - REDIS_REPLICATION_MODE=master
  producer:
    build:
      context: .
      dockerfile: ./dockerfiles/producer.dockerfile
    container_name: 'video_analyzer_producer'
    volumes:
      - .:/app
    working_dir: /app
    depends_on:
      - rabbitmq
      - redis
    environment:
        RABBIT_MQ_URL: 'rabbitmq:5672'

  api:
    build:
      context: .
      dockerfile: ./dockerfiles/api.dockerfile
    ports:
      - "8000:8000"
      - "5000:5000"
    volumes:
      - .:/api
    working_dir: /api
    depends_on:
      - postgres
    environment:
        RABBIT_MQ_URL: 'rabbitmq:5672'
        FLASK_ENV: 'development'
        DATABSE_URL: 'postgresql://postgres:postgres@postgres/stream_analyzer_db'

  postgres:
    image: 'postgres:latest'
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

    command: [ "postgres", "-c", "log_statement=all", "-c", "log_destination=stderr" ]


  consumer:
    image: python:3.8-alpine
    volumes:
      - .:/app
    working_dir: /app
    build:
      context: .
      dockerfile: ./dockerfiles/consumer.dockerfile
    container_name: 'video_analyzer_consumer'
    depends_on:
      - rabbitmq
      - redis
      - postgres
    environment:
        RABBIT_MQ_URL: 'rabbitmq:5672'
        DATABSE_URL: 'postgresql://postgres:postgres@postgres/stream_analyzer_db'


volumes:
  rabbit-mq-data:
  redis-data:
  pg-data:
